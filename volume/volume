#!/usr/bin/env python

import os
import subprocess
import re
from collections import namedtuple
from typing import Iterable
from itertools import chain

VolumeParams = namedtuple('VolumeParams', 'vol_prc,vol_db,state,step')

scontrol_regex = re.compile(r'Simple mixer control \'(.*)\',0')
volume_regex = re.compile(r'.*\[(\d+%)\] (\[(-?\d+.\d+dB)\] )?\[(on|off)\]')


def define_mixer() -> str:
    """
    For PulseAudio users, eventually use "pulse"
    For Jack/Jack2 users, use "jackplug"
    For ALSA users, you may use "default" for your primary card or you may use hw:# where # is the number of the card desired.

    Returns:
        str: defined mixter. Can be defined automatically or by MIXER environment variable.
    """  # noqa: E501
    default_mixer = 'default'
    check_daemon_first = subprocess.run(['pulseaudio'], capture_output=True).returncode
    check_daemon_second = subprocess.run(['pulseaudio', '--check'], capture_output=True).returncode
    check_pulse = subprocess.run(['amixer', '-D', 'pulse', 'info'], capture_output=True).returncode
    if (check_daemon_first or check_daemon_second) and check_pulse:
        default_mixer = 'pulse'

    lsmod = subprocess.run(['lsmod'], capture_output=True)
    check_jack = subprocess.run(['grep', 'jack'], input=lsmod.stdout, capture_output=True)
    if check_jack.stdout:
        default_mixer = 'jackplug'

    return os.getenv('MIXER', default_mixer)


def define_control(mixer: str) -> str:
    """
    The instance option sets the control to report and configure
    This defaults to the first control of your selected mixer
    For a list of the available, use `amixer -D <your_mixer> scontrols`

    Args:
        mixer (str): mixer

    Returns:
        str: defined scontrol. Can be defined automatically or by SCONTROL environment variable.
    """
    scontrol = os.getenv('SCONTROL', 'Master')
    controls = subprocess.run(['amixer', '-D', mixer, 'scontrols'], capture_output=True, text=True).stdout.split('\n')
    for line in controls:
        res = scontrol_regex.search(line)
        if res.group(1) == scontrol:
            return scontrol


def define_step() -> str:
    """
    The first parameter sets the step to change the volume by (and units to display)
    This may be in in % or dB (eg. 5% or 3dB)

    Returns:
        str: defined step from environment variable STEP. Defaults to '5%'.
    """
    return os.getenv('STEP', '5%')


def define_amixer_params() -> str:
    """
    AMIXER(1):
    "Use the mapped volume for evaluating the percentage representation like alsamixer, to be more natural for human ear."

    Returns:
        str: defined amixer params by environment variable NATURAL_MAPPING.
    """  # noqa: E501
    return '-M' if bool(int(os.getenv('NATURAL_MAPPING', '0'))) else ''


def capability(cmd: Iterable, scontrol: str) -> Iterable:
    if scontrol == 'Capture':
        cmd = [*cmd, scontrol]
    return cmd


def volume(amixer_params: str, mixer: str, scontrol: str):
    cmd = filter(None, capability(['amixer', amixer_params, '-D', mixer, 'get', scontrol], scontrol))
    return subprocess.run(cmd, capture_output=True, text=True).stdout


def format_output(in_data: str, step: str) -> dict[str | str]:
    label_on = os.getenv('LABEL_ON', '')
    label_mute = os.getenv('LABEL_MUTE', 'MUTE')
    color_mute = os.getenv('COLOR_MUTE', '#FF0000')

    parsed = volume_regex.search(in_data)
    volume_params = VolumeParams(parsed.group(1), parsed.group(3), parsed.group(4), step)

    txt = label_on
    match volume_params:
        case VolumeParams(_, _, 'off', _):
            print(label_mute)  # full text
            print(label_mute)  # short text
            print(color_mute)  # color
        case VolumeParams(_, vol_db, 'on', _ as step) if 'dB' in step:
            txt += vol_db
            print(txt)  # full text
            print(txt)  # short text
        case VolumeParams(vol_prc, _, 'on', _):
            txt += vol_prc
            print(txt)  # full text
            print(txt)  # short text


def handle_click(amixer_params: str, mixer: str, scontrol: str, step: str):
    button_code = os.getenv('BLOCK_BUTTON')
    cmd = filter(None, capability(['amixer', amixer_params, '-q', '-D', mixer, 'sset', scontrol], scontrol))

    match button_code:
        case '3':
            cmd = chain(cmd, ['toggle'])
        case '4':
            cmd = chain(cmd, [f'{step}+', 'unmute'])
        case '5':
            cmd = chain(cmd, [f'{step}-', 'unmute'])
        case _:
            return
    subprocess.run(cmd, capture_output=True, check=True)


def main():
    mixer = define_mixer()
    scontrol = define_control(mixer)
    amixer_params = define_amixer_params()
    step = define_step()

    handle_click(amixer_params, mixer, scontrol, step)
    output = volume(amixer_params, mixer, scontrol)
    format_output(output, step)


if __name__ == '__main__':
    main()
